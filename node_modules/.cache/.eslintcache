[{"/home/bairamov/Programing/Netflix-clone-reactjs/src/index.tsx":"1","/home/bairamov/Programing/Netflix-clone-reactjs/src/reportWebVitals.ts":"2","/home/bairamov/Programing/Netflix-clone-reactjs/src/App.tsx":"3","/home/bairamov/Programing/Netflix-clone-reactjs/src/components/Slide.tsx":"4","/home/bairamov/Programing/Netflix-clone-reactjs/src/components/Datas.tsx":"5","/home/bairamov/Programing/Netflix-clone-reactjs/src/components/Navbar.tsx":"6","/home/bairamov/Programing/Netflix-clone-reactjs/src/components/Trends.tsx":"7","/home/bairamov/Programing/Netflix-clone-reactjs/src/components/Showdatas.tsx":"8","/home/bairamov/Programing/Netflix-clone-reactjs/src/api/axios.tsx":"9","/home/bairamov/Programing/Netflix-clone-reactjs/src/api/Api.tsx":"10","/home/bairamov/Programing/Netflix-clone-reactjs/src/components/Footer.jsx":"11"},{"size":500,"mtime":1670236838666,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1670236838666,"results":"14","hashOfConfig":"13"},{"size":1050,"mtime":1670354684052,"results":"15","hashOfConfig":"13"},{"size":2715,"mtime":1670247890600,"results":"16","hashOfConfig":"13"},{"size":1495,"mtime":1670351239988,"results":"17","hashOfConfig":"13"},{"size":2482,"mtime":1670354044892,"results":"18","hashOfConfig":"13"},{"size":2306,"mtime":1670354395863,"results":"19","hashOfConfig":"13"},{"size":988,"mtime":1670354384777,"results":"20","hashOfConfig":"13"},{"size":131,"mtime":1670236838665,"results":"21","hashOfConfig":"13"},{"size":393,"mtime":1670236838665,"results":"22","hashOfConfig":"13"},{"size":243,"mtime":1670355388888,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"15v08zz",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/bairamov/Programing/Netflix-clone-reactjs/src/index.tsx",[],["51","52"],"/home/bairamov/Programing/Netflix-clone-reactjs/src/reportWebVitals.ts",[],"/home/bairamov/Programing/Netflix-clone-reactjs/src/App.tsx",[],"/home/bairamov/Programing/Netflix-clone-reactjs/src/components/Slide.tsx",[],"/home/bairamov/Programing/Netflix-clone-reactjs/src/components/Datas.tsx",["53","54"],"import { useEffect, useState } from \"react\";\nimport React from 'react';\nimport request from \"../api/Api\";\nimport axios from \"../api/axios\";\nimport Showdata from \"./Showdatas\";\nimport { Itrends } from \"../types/fetchdata\";\nimport { Ifilms } from \"../types/fetchdata\";\nimport Trends from \"./Trends\";\nimport { RefContext } from \"../App\";\nconst Datas = () => {\n  const [trendfilms, settrendfilms] = useState<Itrends[] | null>(null);\n  const [upcomingfilms, setupcomingfilms] = useState<Ifilms[] | null>(null);\n  const [latestfilms, setlatest] = useState<Ifilms[] | null>(null);\n  const [topratedfilms, settopratefilms] = useState<Ifilms[] | null>(null);\n\n\n  const refContext = React.useContext(RefContext);\n\n\n  useEffect(() => {\n    axios.get(request.fetchUpcoming).then((dat) => {\n      setupcomingfilms(dat.data.results); //ren\n    });\n\n    axios.get(request.fetchtoprated).then((dat) => {\n      settopratefilms(dat.data.results);\n    });\n\n    axios.get(request.fetchtrend).then((dat) => {\n      settrendfilms(dat.data.results);\n    });\n  }, []);\n\n  if(!upcomingfilms || !topratedfilms || !trendfilms)\n  { \n    return <h1>Loding...</h1>\n  }\n  return (\n    <div>\n      <div ref = {refContext?.UpcomingComponentRef}/>\n      <Showdata title='Upcoming films' data={upcomingfilms} />\n      <Showdata title='Top rated films' data={topratedfilms} />\n      <hr style={{ color: \"white\", border: \"9px\", marginBottom: \"60px\" }} />\n      <Trends data={trendfilms} />\n    </div>\n  );\n};\n\nexport default Datas;\n","/home/bairamov/Programing/Netflix-clone-reactjs/src/components/Navbar.tsx",["55","56"],"import \"../styles/Navbar.scss\";\nimport React, { RefObject } from 'react';\nimport { RiNetflixFill } from \"react-icons/ri\";\nimport { GrMenu } from \"react-icons/gr\";\nimport { ImCancelCircle } from \"react-icons/im\";\nimport { useEffect, useState } from \"react\";\nimport { RefContext, types } from '../App';\n\nconst Navbar = () => {\n\n  const [small, setSmall] = useState<boolean>(false);\n  const refContext = React.useContext(RefContext);\n  const [opentoggle, setopentoggle] = useState<boolean>(false);\n\n\n  useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      window.addEventListener(\"scroll\", () => {\n        setSmall(window.pageYOffset > 200);\n        setopentoggle(false);\n      });\n    }\n  }, []);\n\n  const scroolToHome = (e: any): void => {\n    e.preventDefault();\n    if (!refContext?.HomeComponentRef) {\n      return;\n    }\n    refContext?.HomeComponentRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' })\n  }\n\n  const scrollToUpcoming = (e: any): void => {\n    e.preventDefault();\n    if (!refContext?.UpcomingComponentRef) {\n      return;\n    }\n    refContext?.UpcomingComponentRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' })\n  }\n\n  const scrollToTrend = (e : any) : void => { \n      e.preventDefault();\n      if (!refContext?.TrendComponentRef) {\n        return;\n      }\n      refContext?.TrendComponentRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' })\n  }\n\n  return (\n    <div>\n      {opentoggle ? (\n        <div className='minsize'>\n          <div className='toggles-min'>\n            <ul>\n              <li onClick={scroolToHome}>Home</li>\n              <li onClick={scrollToUpcoming}>Top rated</li>\n              <li onClick={scrollToTrend}>Trend</li>\n            </ul>\n          </div>\n        </div>\n      ) : (\n        <div></div>\n      )}\n      <div className={`Navbar ${small ? \"small\" : \"\"}`}>\n        <div className='icon'>\n          <RiNetflixFill style={{ fontSize: \"30px\", marginLeft: \"20px\",color : `${small ? \"black\" : \"white\"}` }} />\n        </div>\n        <div className='open-toggle' onClick={() => setopentoggle(!opentoggle)}>\n          {opentoggle ? <ImCancelCircle /> : <GrMenu />}{\" \"}\n        </div>\n        <div className='toggles'>\n          <ul>\n            <li onClick={scroolToHome}>Home</li>\n            <li onClick={scrollToUpcoming}>Top rated</li>\n            <li onClick={scrollToTrend}>Trend</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Navbar;\n","/home/bairamov/Programing/Netflix-clone-reactjs/src/components/Trends.tsx",["57","58","59"],"import { FC, useEffect } from \"react\";\nimport React from 'react';\nimport \"../styles/Trend.scss\";\nimport { Itrends } from \"../types/fetchdata\";\nimport { RefContext } from \"../App\";\n\ninterface prop {\n  data: Itrends[];\n}\n\nconst Trends: FC<prop> = ({ data }) => {\n  const refContext = React.useContext(RefContext);\n\n  return (\n    <div ref={refContext?.TrendComponentRef}>\n      <div className='Trends' >\n        <h1>Trends</h1>\n        <div className='container-fluid'>\n          <div className='row'>\n            <div className='col-md-4 col-sm-12'>\n              <div className='first-trend'>\n                <div className = \"Img-div\"> \n                <img\n                  src={`https://image.tmdb.org/t/p/original/${data[4].backdrop_path}`}\n                  className='img-fluid'\n                />\n                </div>\n                <div className='indiv'>\n                  <ul>\n                    <li>\n                      Title : <span>{data[4].original_title}</span>\n                    </li>\n                    <li>\n                      Overview : <span>{data[4].overview}</span>\n                    </li>\n                    <li>\n                      Release date : <span>{data[4].release_date}</span>\n                    </li>\n                    <li>\n                      Views : <span>{data[4].popularity}</span>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n            <div className='col-md-8  col-sm-12'>\n              <div className='All-trends '>\n                {data.map((dat) => (\n                  <div className='in-alltrends'>\n                    <div className='img'>\n                      <img\n                        src={`https://image.tmdb.org/t/p/original/${dat.backdrop_path}`}\n                        className='img-fluid'\n                      />\n                    </div>\n                    <div className='information'>\n                      <p>Title: {dat.title}</p>\n                      <p>Release date: {dat.release_date}</p>\n                      <p>Popularity: {dat.popularity}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Trends;\n","/home/bairamov/Programing/Netflix-clone-reactjs/src/components/Showdatas.tsx",["60","61","62"],"import { FC, useEffect } from \"react\";\nimport React from 'react';\nimport { Ifilms, Itrends } from \"../types/fetchdata\";\nimport \"../styles/Showdata.scss\";\n\ninterface prop {\n  title: string;\n  data: Ifilms[];\n}\n\nconst Showdatas: FC<prop> = ({ title, data }) => {\n\n  return (\n    <div>\n      <div className='Show-data'>\n        <div className='Show-data-header'>\n          <p>{title}</p>\n        </div>\n        <div className='Show-data-slide-div'>\n          <div className='Show-slide'>\n            {data.map((s) => (\n              <div className='Show-slide-scrolll-in'>\n                <div className='image'>\n                  <img\n                    src={`https://image.tmdb.org/t/p/original/${s.backdrop_path}`}\n                    width='100%'\n                    height='100%'\n                  />\n                </div>\n                <p>{s.title}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Showdatas;\n","/home/bairamov/Programing/Netflix-clone-reactjs/src/api/axios.tsx",[],"/home/bairamov/Programing/Netflix-clone-reactjs/src/api/Api.tsx",[],"/home/bairamov/Programing/Netflix-clone-reactjs/src/components/Footer.jsx",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":13,"column":10,"nodeType":"69","messageId":"70","endLine":13,"endColumn":21},{"ruleId":"67","severity":1,"message":"71","line":13,"column":23,"nodeType":"69","messageId":"70","endLine":13,"endColumn":32},{"ruleId":"67","severity":1,"message":"72","line":2,"column":17,"nodeType":"69","messageId":"70","endLine":2,"endColumn":26},{"ruleId":"67","severity":1,"message":"73","line":7,"column":22,"nodeType":"69","messageId":"70","endLine":7,"endColumn":27},{"ruleId":"67","severity":1,"message":"74","line":1,"column":14,"nodeType":"69","messageId":"70","endLine":1,"endColumn":23},{"ruleId":"75","severity":1,"message":"76","line":23,"column":17,"nodeType":"77","endLine":26,"endColumn":19},{"ruleId":"75","severity":1,"message":"76","line":51,"column":23,"nodeType":"77","endLine":54,"endColumn":25},{"ruleId":"67","severity":1,"message":"74","line":1,"column":14,"nodeType":"69","messageId":"70","endLine":1,"endColumn":23},{"ruleId":"67","severity":1,"message":"78","line":3,"column":18,"nodeType":"69","messageId":"70","endLine":3,"endColumn":25},{"ruleId":"75","severity":1,"message":"76","line":24,"column":19,"nodeType":"77","endLine":28,"endColumn":21},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"@typescript-eslint/no-unused-vars","'latestfilms' is assigned a value but never used.","Identifier","unusedVar","'setlatest' is assigned a value but never used.","'RefObject' is defined but never used.","'types' is defined but never used.","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Itrends' is defined but never used.","no-global-assign","no-unsafe-negation"]